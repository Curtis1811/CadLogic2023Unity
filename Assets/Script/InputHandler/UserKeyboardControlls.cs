//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Script/InputHandler/UserKeyboardControlls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @UserKeyboardControlls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @UserKeyboardControlls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""UserKeyboardControlls"",
    ""maps"": [
        {
            ""name"": ""UserActionMap"",
            ""id"": ""26caab58-43de-43b5-9794-bb40b2c1d43c"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""4cd4a510-650a-47ef-ae01-037c71e36bfb"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Move"",
                    ""id"": ""08ea1806-c9e4-422c-88aa-5cd9b6255fb4"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""054cc59c-355e-4dd5-9f2a-bc8e14bf04a0"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""808ab893-941a-469e-b8f0-ed1235335f41"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c6710dfc-58c6-4839-9eaa-1f38aa55bf08"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""729770a4-647d-4c07-8fcb-aadb548ba741"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""f651c401-8bbe-4267-9f79-d0a6dea8740d"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""c4f838af-d0eb-48c8-bbad-9b4974dc4435"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // UserActionMap
        m_UserActionMap = asset.FindActionMap("UserActionMap", throwIfNotFound: true);
        m_UserActionMap_Movement = m_UserActionMap.FindAction("Movement", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // UserActionMap
    private readonly InputActionMap m_UserActionMap;
    private List<IUserActionMapActions> m_UserActionMapActionsCallbackInterfaces = new List<IUserActionMapActions>();
    private readonly InputAction m_UserActionMap_Movement;
    public struct UserActionMapActions
    {
        private @UserKeyboardControlls m_Wrapper;
        public UserActionMapActions(@UserKeyboardControlls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_UserActionMap_Movement;
        public InputActionMap Get() { return m_Wrapper.m_UserActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UserActionMapActions set) { return set.Get(); }
        public void AddCallbacks(IUserActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_UserActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UserActionMapActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
        }

        private void UnregisterCallbacks(IUserActionMapActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
        }

        public void RemoveCallbacks(IUserActionMapActions instance)
        {
            if (m_Wrapper.m_UserActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUserActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_UserActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UserActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UserActionMapActions @UserActionMap => new UserActionMapActions(this);
    public interface IUserActionMapActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
}
